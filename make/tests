##
# Build test executables
##

test/%$(EXE) : CXXFLAGS += $(CXXFLAGS_GTEST)
test/%$(EXE) : CPPFLAGS += $(CPPFLAGS_GTEST)
test/%$(EXE) : INC += $(INC_GTEST)
test/%$(EXE) : test/%.o $(GTEST)/src/gtest_main.cc $(GTEST)/src/gtest-all.o $(LIBSUNDIALS) $(MPI_TARGETS)
	$(LINK.cpp) $(filter-out test/%.hpp %.hpp-test,$^) $(LDLIBS) $(OUTPUT_OPTION)

test/%.o : src/test/%.cpp
	@mkdir -p $(dir $@)
	$(COMPILE.cpp) $< $(OUTPUT_OPTION)

##
# Customization for generating dependencies
##
src/test/%.d : CXXFLAGS += $(CXXFLAGS_GTEST)
src/test/%.d : CPPFLAGS += $(CPPFLAGS_GTEST)
src/test/%.d : INC += $(INC_GTEST)
src/test/%.d : DEPFLAGS = -MT $(patsubst src/test/%.d,test/%.o,$@) -MT $@ -M -MG -MP -MF $@

ifneq ($(filter test/% print-%,$(MAKECMDGOALS)),)
-include $(patsubst test/%$(EXE),src/test/%.d,$(filter test/%,$(MAKECMDGOALS)))
-include $(patsubst %.cpp,%.d,$(STANC_TEMPLATE_INSTANTIATION_CPP))
endif

TEST_MODELS := $(shell find src/test/test-models -name '*.stan' -type f)

############################################################
#
# Target to verify header files within CmdStan has
# enough include calls
##
HEADER_TESTS := $(addsuffix -test,$(shell find src/cmdstan -name '*.hpp' -type f))

ifeq ($(OS),Windows_NT)
  DEV_NULL = nul
else
  DEV_NULL = /dev/null
endif

%.hpp-test : %.hpp test/dummy.cpp
	$(COMPILE.cpp) -O0 -include $^ -o $(DEV_NULL)

test/dummy.cpp:
	@mkdir -p test
	@touch $@
	@echo "int main() {return 0;}" >> $@

.PHONY: test-headers
test-headers: $(HEADER_TESTS)


##
# Build test executables
##
test/%$(EXE) : CXXFLAGS += $(CXXFLAGS_GTEST)
test/%$(EXE) : CPPFLAGS += $(CPPFLAGS_GTEST)
test/%$(EXE) : INC += $(INC_GTEST)

ifeq ($(CXX_TYPE),clang)
TEST_MODELS = $(shell find src/test/test-models -name '*.stan')
$(patsubst %.stan,%$(EXE),$(TEST_MODELS)) : $(STAN)src/stan/model/model_header.hpp.gch
endif

test/%$(EXE) : test/%.o $(GTEST)/src/gtest_main.cc $(GTEST)/src/gtest-all.o $(LIBSUNDIALS) $(MPI_TARGETS)
	$(LINK.cpp) $(filter-out src/test/test-models/% test/%.hpp %.hpp-test,$^) $(LDLIBS) $(OUTPUT_OPTION)

##
# Tests that depend on compiled models
##
test/interface/command_test$(EXE): $(addsuffix $(EXE),$(addprefix src/test/test-models/, printer domain_fail proper value_fail transformed_data_rng_test))
test/interface/metric_test$(EXE): $(addsuffix $(EXE),$(addprefix src/test/test-models/, test_model proper))
test/interface/csv_header_consistency_test$(EXE): src/test/test-models/csv_header_consistency$(EXE)
test/interface/diagnose_test$(EXE): bin/diagnose$(EXE)
test/interface/elapsed_time_test$(EXE): src/test/test-models/test_model$(EXE)
test/interface/fixed_param_sampler_test$(EXE): $(addsuffix $(EXE),$(addprefix src/test/test-models/, empty proper))
test/interface/model_output_test$(EXE): src/test/test-models/printer$(EXE)
test/interface/optimization_output_test$(EXE): src/test/test-models/optimization_output$(EXE)
test/interface/print_test$(EXE): src/test/interface/matrix_output.csv bin/print$(EXE)
test/interface/print_uninitialized_test$(EXE): src/test/test-models/print_uninitialized$(EXE)
test/interface/arguments/argument_configuration_test$(EXE): src/test/test-models/test_model$(EXE)
test/interface/stansummary_test$(EXE): src/test/interface/matrix_output.csv bin/stansummary$(EXE)
test/interface/variational_output_test$(EXE): src/test/test-models/variational_output$(EXE)
















# ##
# # TEST_TARGETS is the set of all src/test subdirectories excluding src/test.
# ##
# TEST_TARGETS := $(shell find src/test ! -path src/test -type d)

# ##
# # ALL_TESTS is the set of all test files
# #   This needs to be an '=' assignment and not a ':='.
# ##
# ALL_TESTS = $(shell find src/test -type f -name '*_test.cpp')

# ALL_TEST_EXECUTABLES = $(patsubst src/%.cpp,%$(EXE),$(ALL_TESTS))

# .PRECIOUS: test/%.o
# test/%$(EXE) : test/%.o $(LIBGTEST) $(LIBSUNDIALS) $(LIBMPI)
#	@mkdir -p $(dir $@)
#	$(LINK.cc) $< -O$O $(GTEST_MAIN) $(GTEST_CXXFLAGS) $(OUTPUT_OPTION) $(LIBGTEST) $(LIBSUNDIALS) $(CXXFLAGS_MPI) $(LIBMPI) $(LDFLAGS_MPI)
# ifeq ($(strip $(findstring src/test/,$(MAKECMDGOALS))), )
#	$(WINE) $@ --gtest_output="xml:$(basename $@).xml"
# endif

# ####
# ## These make rules apply if SECONDEXPANSION is available
# ## in make.
# ####
# ifneq ($(filter second-expansion,$(.FEATURES)),)
# ##
# # Defining the test target implicit static rule.
# #
# # Each src/test/* depends on each executable that's generated
# # by the test file.
# ##

# ## n is used to add line breaks (necessary for windows)
# define n


# endef

# .SECONDEXPANSION:
# .PHONY: $(TEST_TARGETS)
# $(TEST_TARGETS): src/test/%: $$(filter $$(patsubst src/$$(PERCENT),$$(PERCENT),$$@)/$$(PERCENT),$$(ALL_TEST_EXECUTABLES))
#	$(foreach test,$^,$(WINE) $(test) --gtest_output="xml:$(basename $(test)).xml"; $n)
#	@echo ''
#	@echo 'Ran '$(words $(filter test/%,$^))' tests for '$@
# else
# ####
# ## Warning for developers that don't have a
# ## current enough version of make (3.81 or higher).
# ####
# .PHONY: $(TEST_TARGETS)
# $(TEST_TARGETS):
#	@echo ''
#	@echo '------------------------------------------------------------'
#	@echo 'The current version of make does not satisfy the developer  '
#	@echo 'requirements. Please install make 3.81 or higher.           '
#	@echo '------------------------------------------------------------'
# endif


# ##
# # Tests that depend on compiled models
# ##
# test/interface/command_test$(EXE): $(addsuffix $(EXE),$(addprefix src/test/test-models/, printer domain_fail proper value_fail transformed_data_rng_test))
# test/interface/metric_test$(EXE): $(addsuffix $(EXE),$(addprefix src/test/test-models/, test_model proper))
# test/interface/csv_header_consistency_test$(EXE): src/test/test-models/csv_header_consistency$(EXE)
# test/interface/diagnose_test$(EXE): bin/diagnose$(EXE)
# test/interface/elapsed_time_test$(EXE): src/test/test-models/test_model$(EXE)
# test/interface/fixed_param_sampler_test$(EXE): $(addsuffix $(EXE),$(addprefix src/test/test-models/, empty proper))
# test/interface/model_output_test$(EXE): src/test/test-models/printer$(EXE)
# test/interface/optimization_output_test$(EXE): src/test/test-models/optimization_output$(EXE)
# test/interface/print_test$(EXE): src/test/interface/matrix_output.csv bin/print$(EXE)
# test/interface/print_uninitialized_test$(EXE): src/test/test-models/print_uninitialized$(EXE)
# test/interface/arguments/argument_configuration_test$(EXE): src/test/test-models/test_model$(EXE)
# test/interface/stansummary_test$(EXE): src/test/interface/matrix_output.csv bin/stansummary$(EXE)
# test/interface/variational_output_test$(EXE): src/test/test-models/variational_output$(EXE)
