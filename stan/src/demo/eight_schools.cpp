// Code generated by Stan version alpha.0

#include <cmath>
#include <vector>
#include <fstream>
#include <iostream>
#include <sstream>
#include <Eigen/Dense>
#include <stan/agrad/agrad.hpp>
#include <stan/agrad/special_functions.hpp>
#include <stan/agrad/matrix.hpp>
#include <stan/gm/command.hpp>
#include <stan/io/cmd_line.hpp>
#include <stan/io/dump.hpp>
#include <stan/io/reader.hpp>
#include <stan/io/csv_writer.hpp>
#include <stan/maths/matrix.hpp>
#include <stan/maths/special_functions.hpp>
#include <stan/mcmc/hmc.hpp>
#include <stan/mcmc/sampler.hpp>
#include <stan/model/prob_grad_ad.hpp>
#include <stan/prob/distributions.hpp>

namespace test_model_namespace {

using std::vector;
using std::string;
using std::stringstream;
using stan::agrad::var;
using stan::mcmc::prob_grad_ad;
using stan::io::dump;
using std::istream;

typedef Eigen::Matrix<double,1,Eigen::Dynamic> vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,1> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;
typedef Eigen::Matrix<stan::agrad::var,1,Eigen::Dynamic> vector_v;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,1> row_vector_v;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,Eigen::Dynamic> matrix_v;

class test_model : public prob_grad_ad {
private:
    int J;
    vector<double> y;
    vector<double> sigma_y;
    double sigma_xi;
public:
    test_model(stan::io::var_context& context__)
        : prob_grad_ad::prob_grad_ad(0) {
        unsigned int pos__;
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        assert(context__.contains_i("J"));
        vals_i__ = context__.vals_i("J");
        pos__ = 0;
        J = vals_i__[pos__++];
        std::vector<unsigned int> dims_y__;
        dims_y__.push_back(J);
        stan::maths::resize(y,dims_y__);
        assert(context__.contains_r("y"));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        unsigned int y_limit_0__ = J;
        for (unsigned int i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_r__[pos__++];
        }
        std::vector<unsigned int> dims_sigma_y__;
        dims_sigma_y__.push_back(J);
        stan::maths::resize(sigma_y,dims_sigma_y__);
        assert(context__.contains_r("sigma_y"));
        vals_r__ = context__.vals_r("sigma_y");
        pos__ = 0;
        unsigned int sigma_y_limit_0__ = J;
        for (unsigned int i_0__ = 0; i_0__ < sigma_y_limit_0__; ++i_0__) {
            sigma_y[i_0__] = vals_r__[pos__++];
        }
        std::vector<unsigned int> dims_sigma_xi__;
        stan::maths::resize(sigma_xi,dims_sigma_xi__);
        assert(context__.contains_r("sigma_xi"));
        vals_r__ = context__.vals_r("sigma_xi");
        pos__ = 0;
        sigma_xi = vals_r__[pos__++];
        set_param_ranges();
    } // dump ctor
    void set_param_ranges() {
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += J;
        ++num_params_r__;
    }


    var log_prob(vector<var>& params_r__,
                 vector<int>& params_i__) {

        var lp__(0.0);
        // model parameters
        stan::io::reader<var> in__(params_r__,params_i__);

        var mu = in__.scalar_constrain(lp__);
        var xi = in__.scalar_constrain(lp__);
        vector<var> eta;
        unsigned int dim_eta_0 = J;
        for (unsigned int k_0 = 0; k_0 < dim_eta_0; ++k_0) {
            eta.push_back(in__.scalar_constrain(lp__));
        }
        var sigma_eta = in__.scalar_lb_constrain(0,lp__);

        // derived variables

        // model body
        lp__ += stan::prob::cauchy_log(sigma_eta, 0, 1);
        for (int j = 1; j <= J; ++j) {
            lp__ += stan::prob::normal_log(eta[j - 1], 0, sigma_eta);
        }
        lp__ += stan::prob::normal_log(mu, 0, 10);
        lp__ += stan::prob::normal_log(xi, 0, sigma_xi);
        for (int j = 1; j <= J; ++j) {
            lp__ += stan::prob::normal_log(y[j - 1], (mu + (xi * eta[j - 1])), sigma_y[j - 1]);
        }

        return lp__;

    } // log_prob()

    void write_csv(std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__) {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        double mu = in__.scalar_constrain();
        writer__.write(mu);
        double xi = in__.scalar_constrain();
        writer__.write(xi);
        vector<double> eta;
        unsigned int dim_eta_0 = J;
        for (unsigned int k_0 = 0; k_0 < dim_eta_0; ++k_0) {
            eta.push_back(in__.scalar_constrain());
            writer__.write(eta[k_0]);
        }
        double sigma_eta = in__.scalar_lb_constrain(0);
        writer__.write(sigma_eta);
        writer__.newline();
    }

}; // model

} // namespace

int main(int argc__, const char* argv__[]) {
    stan::io::cmd_line cmd__(argc__,argv__);
    std::string data_file_path__;
    cmd__.val("data_file",data_file_path__);
    std::fstream data_file__(data_file_path__.c_str(),std::fstream::in);
    stan::io::dump dump__(data_file__);
    test_model_namespace::test_model model__(dump__);
    data_file__.close();
    stan::gm::hmc_command(cmd__,model__);
}

