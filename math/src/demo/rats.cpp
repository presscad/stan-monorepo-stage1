// Code generated by Stan version alpha.0

#include <cmath>
#include <vector>
#include <fstream>
#include <iostream>
#include <sstream>
#include <boost/exception/all.hpp>
#include <Eigen/Dense>
#include <stan/agrad/agrad.hpp>
#include <stan/agrad/special_functions.hpp>
#include <stan/agrad/matrix.hpp>
#include <stan/gm/command.hpp>
#include <stan/io/cmd_line.hpp>
#include <stan/io/dump.hpp>
#include <stan/io/reader.hpp>
#include <stan/io/csv_writer.hpp>
#include <stan/maths/matrix.hpp>
#include <stan/maths/special_functions.hpp>
#include <stan/mcmc/hmc.hpp>
#include <stan/mcmc/sampler.hpp>
#include <stan/mcmc/prob_grad_ad.hpp>
#include <stan/prob/distributions.hpp>
#include <stan/prob/ag_distributions.hpp>

namespace test_model_namespace {

using std::vector;
using std::string;
using std::stringstream;
using stan::agrad::var;
using stan::mcmc::prob_grad_ad;
using stan::io::dump;
using std::istream;
using namespace stan::maths;

typedef Eigen::Matrix<double,1,Eigen::Dynamic> vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,1> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;
typedef Eigen::Matrix<stan::agrad::var,1,Eigen::Dynamic> vector_v;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,1> row_vector_v;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,Eigen::Dynamic> matrix_v;

class test_model : public prob_grad_ad {
private:
    int N;
    int T;
    vector<double> x;
    double xbar;
    vector<vector<double> > y;
public:
    test_model(stan::io::var_context& context__)
        : prob_grad_ad::prob_grad_ad(0) {
        unsigned int pos__;
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        std::vector<unsigned int> dims_N__;
        stan::maths::resize(N,dims_N__);
        if (!context__.contains_i("N"))
            throw std::runtime_error("variable N not found.");
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        std::vector<unsigned int> dims_T__;
        stan::maths::resize(T,dims_T__);
        if (!context__.contains_i("T"))
            throw std::runtime_error("variable T not found.");
        vals_i__ = context__.vals_i("T");
        pos__ = 0;
        T = vals_i__[pos__++];
        std::vector<unsigned int> dims_x__;
        dims_x__.push_back(T);
        stan::maths::resize(x,dims_x__);
        if(!context__.contains_r("x"))
            throw std::runtime_error("variable x not found.");
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        unsigned int x_limit_0__ = T;
        for (unsigned int i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
            x[i_0__] = vals_r__[pos__++];
        }
        std::vector<unsigned int> dims_xbar__;
        stan::maths::resize(xbar,dims_xbar__);
        if(!context__.contains_r("xbar"))
            throw std::runtime_error("variable xbar not found.");
        vals_r__ = context__.vals_r("xbar");
        pos__ = 0;
        xbar = vals_r__[pos__++];
        std::vector<unsigned int> dims_y__;
        dims_y__.push_back(N);
        dims_y__.push_back(T);
        stan::maths::resize(y,dims_y__);
        if(!context__.contains_r("y"))
            throw std::runtime_error("variable y not found.");
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        unsigned int y_limit_1__ = T;
        for (unsigned int i_1__ = 0; i_1__ < y_limit_1__; ++i_1__) {
            unsigned int y_limit_0__ = N;
            for (unsigned int i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        set_param_ranges();
    } // dump ctor
    void set_param_ranges() {
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += N;
        num_params_r__ += N;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }


    var log_prob(vector<var>& params_r__,
                 vector<int>& params_i__) {

        var lp__(0.0);
        // model parameters
        stan::io::reader<var> in__(params_r__,params_i__);

        vector<var> alpha;
        unsigned int dim_alpha_0 = N;
        for (unsigned int k_0 = 0; k_0 < dim_alpha_0; ++k_0) {
            alpha.push_back(in__.scalar_constrain(lp__));
        }
        vector<var> beta;
        unsigned int dim_beta_0 = N;
        for (unsigned int k_0 = 0; k_0 < dim_beta_0; ++k_0) {
            beta.push_back(in__.scalar_constrain(lp__));
        }
        var mu_alpha = in__.scalar_constrain(lp__);
        var mu_beta = in__.scalar_constrain(lp__);
        var tau_y = in__.scalar_lb_constrain(0,lp__);
        var tau_alpha = in__.scalar_lb_constrain(0,lp__);
        var tau_beta = in__.scalar_lb_constrain(0,lp__);

        // derived variables
        var sigma_y;
        var sigma_alpha;
        var sigma_beta;

        sigma_y = (1 / sqrt(tau_y));
        sigma_alpha = (1 / sqrt(tau_alpha));
        sigma_beta = (1 / sqrt(tau_beta));

        // model body
        lp__ += stan::prob::normal_log(mu_alpha, 0, 100);
        lp__ += stan::prob::normal_log(mu_beta, 0, 100);
        lp__ += stan::prob::gamma_log(tau_y, 0.001, 0.001);
        lp__ += stan::prob::gamma_log(tau_alpha, 0.001, 0.001);
        lp__ += stan::prob::gamma_log(tau_beta, 0.001, 0.001);
        lp__ += stan::prob::normal_log(alpha, mu_alpha, sigma_alpha);
        lp__ += stan::prob::normal_log(beta, mu_beta, sigma_beta);
        for (int n = 1; n <= N; ++n) {
            for (int t = 1; t <= T; ++t) {
                lp__ += stan::prob::normal_log(y[n - 1][t - 1], (alpha[n - 1] + (beta[n - 1] * (x[t - 1] - xbar))), sigma_y);
            }
        }

        return lp__;

    } // log_prob()

    void write_csv(std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__) {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        vector<double> alpha;
        unsigned int dim_alpha_0 = N;
        for (unsigned int k_0 = 0; k_0 < dim_alpha_0; ++k_0) {
            alpha.push_back(in__.scalar_constrain());
            writer__.write(alpha[k_0]);
        }
        vector<double> beta;
        unsigned int dim_beta_0 = N;
        for (unsigned int k_0 = 0; k_0 < dim_beta_0; ++k_0) {
            beta.push_back(in__.scalar_constrain());
            writer__.write(beta[k_0]);
        }
        double mu_alpha = in__.scalar_constrain();
        writer__.write(mu_alpha);
        double mu_beta = in__.scalar_constrain();
        writer__.write(mu_beta);
        double tau_y = in__.scalar_lb_constrain(0);
        writer__.write(tau_y);
        double tau_alpha = in__.scalar_lb_constrain(0);
        writer__.write(tau_alpha);
        double tau_beta = in__.scalar_lb_constrain(0);
        writer__.write(tau_beta);
        writer__.newline();
    }

}; // model

} // namespace

int main(int argc__, const char* argv__[]) {
    try {
        stan::io::cmd_line cmd__(argc__,argv__);
        std::string data_file_path__;
        cmd__.val("data_file",data_file_path__);
        std::fstream data_file__(data_file_path__.c_str(),std::fstream::in);
        stan::io::dump dump__(data_file__);
        test_model_namespace::test_model model__(dump__);
        std::vector<double> params_r(model__.num_params_r(), 1);
        std::vector<int> params_i(model__.num_params_i());
        data_file__.close();
        stan::gm::nuts_command(cmd__,model__);
    } catch (std::exception& e) {
        std::cerr << std::endl << "Exception caught: " << e.what() << std::endl;
        std::cerr << "Diagnostic informtion: " << std::endl << boost::diagnostic_information(e) << std::endl;
    }
}

