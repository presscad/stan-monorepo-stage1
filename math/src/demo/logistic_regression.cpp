// Code generated by Stan version alpha.0

#include <stan/model/model_header.hpp>

namespace logistic_regression_namespace {

using std::vector;
using std::string;
using std::stringstream;
using stan::agrad::var;
using stan::model::prob_grad_ad;
using stan::math::get_base1;
using stan::io::dump;
using std::istream;
using namespace stan::math;
using namespace stan::prob;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,1> vector_v;
typedef Eigen::Matrix<stan::agrad::var,1,Eigen::Dynamic> row_vector_v;
typedef Eigen::Matrix<stan::agrad::var,Eigen::Dynamic,Eigen::Dynamic> matrix_v;

class logistic_regression : public prob_grad_ad {
private:
    int N;
    int D;
    vector<int> y;
    vector<vector<double> > x;
public:
    logistic_regression(stan::io::var_context& context__)
        : prob_grad_ad::prob_grad_ad(0) {
        static const char* function__ = "logistic_regression_namespace::logistic_regression(%1%)";
        size_t pos__;
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        N = int(0);
        if (!context__.contains_i("N"))
            throw std::runtime_error("variable N not found.");
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        D = int(0);
        if (!context__.contains_i("D"))
            throw std::runtime_error("variable D not found.");
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        y = std::vector<int>(N,int(0));
        if (!context__.contains_i("y"))
            throw std::runtime_error("variable y not found.");
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        x = std::vector<std::vector<double> >(N,std::vector<double>(D,double(0)));
        if(!context__.contains_r("x"))
            throw std::runtime_error("variable x not found.");
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_limit_1__ = D;
        for (size_t i_1__ = 0; i_1__ < x_limit_1__; ++i_1__) {
            size_t x_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                x[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        // validate data
        check_greater_or_equal(function__,N,0,"N");
        check_greater_or_equal(function__,D,0,"D");

        // validate transformed data

        set_param_ranges();
    } // dump ctor

    void set_param_ranges() {
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += D;
    }

    void transform_inits(const stan::io::var_context& var_context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) {
        params_r__.clear();
        params_i__.clear();
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(var_context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        if (var_context__.dims_r("beta").size() != 1)
            throw std::runtime_error("require 1 dimensions for variable beta");
        vals_r__ = var_context__.vals_r("beta");
        pos__ = 0U;
        std::vector<double> beta(D,double(0));
        for (int i0__ = 0U; i0__ < D; ++i0__)
            beta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < D; ++i0__)
            writer__.scalar_unconstrain(beta[i0__]);
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    var log_prob(vector<var>& params_r__,
                 vector<int>& params_i__) {

        var lp__(0.0);
        // model parameters
        stan::io::reader<var> in__(params_r__,params_i__);

        vector<var> beta;
        size_t dim_beta_0 = D;
        for (size_t k_0 = 0; k_0 < dim_beta_0; ++k_0) {
            beta.push_back(in__.scalar_constrain(lp__));
        }

        // transformed parameters


        // model body
        for (int d = 1; d <= D; ++d) {
            lp__ += stan::prob::normal_log<true>(get_base1(beta,d,"beta",1), 0, 100);
        }
        for (int n = 1; n <= N; ++n) {
            lp__ += stan::prob::bernoulli_logit_log<true>(get_base1(y,n,"y",1), dot_product(beta,get_base1(x,n,"x",1)));
        }

        return lp__;

    } // log_prob()


    void write_csv_header(std::ostream& o__) {
        stan::io::csv_writer writer__(o__);
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            writer__.comma();
            o__ << "beta" << '.' << k_0__;
        }
        writer__.newline();
    }

    void write_csv(std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__) {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "logistic_regression_namespace::write_csv(%1)";
        // read-transform, write parameters
        vector<double> beta;
        size_t dim_beta_0 = D;
        for (size_t k_0 = 0; k_0 < dim_beta_0; ++k_0) {
            beta.push_back(in__.scalar_constrain());
            writer__.write(beta[k_0]);
        }

        // declare and define transformed parameters
        double lp__ = 0.0;


        // validate transformed parameters

        // write transformed parameters

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
        writer__.newline();
    }

}; // model

} // namespace

int main(int argc, const char* argv[]) {
    try {
        stan::gm::nuts_command<logistic_regression_namespace::logistic_regression>(argc,argv);
    } catch (std::exception& e) {
        std::cerr << std::endl << "Exception: " << e.what() << std::endl;
        std::cerr << "Diagnostic information: " << std::endl << boost::diagnostic_information(e) << std::endl;
        return -1;
    }
}

