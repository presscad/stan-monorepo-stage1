\documentclass[12pt]{article}
\usepackage{Sweave}
\usepackage{hyperref}
\usepackage{times}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{xspace}
\usepackage{titlesec}
\usepackage{graphicx}
\usepackage{natbib}
\usepackage{url}
\usepackage{booktabs} 
\usepackage{enumerate}
\usepackage{alltt}

\DefineVerbatimEnvironment{Sinput}{Verbatim} {xleftmargin=2em,fontsize=\footnotesize} 
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=2em,fontsize=\footnotesize} 
\DefineVerbatimEnvironment{Scode}{Verbatim}{xleftmargin=2em,fontsize=\footnotesize}

\newcommand{\R}{R\xspace}
\newcommand{\Stan}{Stan\xspace}
\newcommand{\RStan}{RStan\xspace}
\newcommand{\stanc}{{\ttfamily stanc}\xspace}
\newcommand*{\Cpp}{C\raise.2ex\hbox{\footnotesize ++}\xspace} %\ensuremath{++}
\newcommand{\clang}{{\ttfamily clang\raise.2ex\hbox{\footnotesize ++}}\xspace} 
\newcommand{\gpp}{{\ttfamily g\raise.2ex\hbox{\footnotesize ++}}\xspace} 

\providecommand{\T}{\rule{0pt}{2.6ex}}
\providecommand{\B}{\rule[-1.2ex]{0pt}{0pt}}

\newcommand{\acronym}[1]{{\sc #1}\xspace}

\newcommand{\ASCII}{\acronym{ascii}}
\newcommand{\BNF}{\acronym{bnf}}
\newcommand{\MATLAB}{\acronym{matlab}}
\newcommand{\SPLUS}{\acronym{s}}
\newcommand{\BUGS}{\acronym{bugs}}
\newcommand{\JAGS}{\acronym{jags}}
\newcommand{\MCMC}{\acronym{mcmc}}
\newcommand{\HMC}{\acronym{hmc}}
\newcommand{\NUTS}{\acronym{nuts}}
\newcommand{\MSVC}{\acronym{msvc}}
\newcommand{\LKJ}{\acronym{lkj}}
\newcommand{\CPC}{\acronym{cpc}}

\newcommand{\code}[1]{{\tt #1}}

\newcommand{\strong}[1]{\texorpdfstring%
{{\normalfont\fontseries{b}\selectfont #1}}%
{#1}}
\let\pkg=\strong
\newcommand{\CRANpkg}[1]{\href{http://cran.r-project.org/package=#1}{\pkg{#1}}}%
\let\cpkg=\CRANpkg
\newcommand{\ctv}[1]{\href{http://CRAN.R-project.org/view=#1}{\emph{#1}}}
\newenvironment{example}{\begin{alltt}}{\end{alltt}}
\newenvironment{smallexample}{\begin{alltt}\small}{\end{alltt}}

\newcommand{\E}{\mathsf{E}}
\newcommand{\VAR}{\mathsf{VAR}}
\newcommand{\COV}{\mathsf{COV}}
\newcommand{\Prob}{\mathsf{P}}

\bibliographystyle{apalike}

%\VignetteIndexEntry{RStan} 

% The next line is needed for inverse search...
\SweaveOpts{concordance=TRUE, keep.source=TRUE}
<<echo=false>>=
options(width=60)
@

\title{\RStan: the \R interface to \Stan} 

\author{The Stan Development Team \\ mc.stanislaw@gmail.com}


\begin{document}

\maketitle

\tableofcontents

\section{Introduction}

This is a short introduction to \RStan \footnote{The name of this package is
\pkg{rstan}, so we should use \code{library(rstan)} to load it in \R.}, 
the \R interface to \Stan. Users of \RStan need to be familiar with \Stan first,
especially the \Stan modeling language.  Details about \Stan can be found in 
\emph{Stan Modeling Language User's Guide and Reference
Manual} (\citealt{StanManual:2012}), so we focus on how to use \RStan by an
example in \cite{GelmanCarlinSternRubin:2003} here. 

\subsection{Prerequisites} 

Although we refer to \RStan as an \R interface to \Stan, \RStan does not 
need \Stan to be installed. However, we need a \Cpp compiler as needed by
\Stan. Refer to \cite{StanManual:2012} for how to install a \Cpp compiler if there 
not exists one. 

In addition, package \pkg{rstan} depends on other \R packages: \cpkg{Rcpp}, \cpkg{inline},
and \cpkg{RcppEigen}. Before installing \RStan, these packages 
need to be installed first if not installed automatically. 

\subsection{Overview of using \RStan}

First, we can summarize the steps of using \Stan to conduct 
statistical inference simply as follows. 
\begin{enumerate}[I]
\item Represent the statistical model in \Stan modeling language 
\item Translate model coded in \Stan modeling language to \Cpp code using \stanc 
\item Compile the \Cpp code for the model using a \Cpp compiler such as \gpp to 
      create an executable file 
\item Prepare Data  
\item Run the executable to generate sample 
\item Conduct model inference based on the sample 
\end{enumerate}

In \RStan, we have the same steps as in \Stan but packaged 
in different functions. Knowing these steps is helpful especially
in the case we encounter problem with our coding. In \RStan, 
we provide a function called \code{stan} to wrap up
most of the above steps. 


\section{An example of using \RStan} 
\label{sec0example} 

In this section, we use an example to demonstrate using \RStan. 
In section 5.5 of \cite{GelmanCarlinSternRubin:2003}, a hierarchical model is used to model 
coaching effects from eight schools. For short, we call this example ``eight schools.'' 
The data are given in table
\ref{tab08schoolsdata}. 
The statistical model is specified as 
\begin{align}
y_j &\sim \text{normal}(\theta_j, \sigma_j), \quad j=1,\ldots,8, \label{eq08schoolmodeleq1} \\ 
\theta_1, \ldots, \theta_8 &\overset{IID}{\sim} \text{normal}(\mu, \tau^2), 
\end{align} 
where in \eqref{eq08schoolmodeleq1}, $\sigma_j$ is known. 
Further we have prior for $(\mu, \tau)$ as specified in \cite{GelmanCarlinSternRubin:2003}. 

\begin{table}[ht]
\centering 
\caption{Data of Eight schools example}
\label{tab08schoolsdata}
\begin{tabular}{ccc} 
\toprule 
School  & 
\begin{minipage}[t]{0.16\columnwidth}%
Estimated treatment effect, $y_j$ 
\end{minipage} &
\begin{minipage}[t]{0.16\columnwidth}%
s.e.\ of effect estimate, $\sigma_j$  
\end{minipage}  \\
\midrule
A     &  28   & 15  \\
B     &   8   & 10  \\
C     &  -3   & 16  \\
D     &   7   & 11  \\
E     &  -1   &  9  \\
F     &   1   & 11  \\
G     &  18   & 10  \\
H     &  12   & 18  \\
\bottomrule
\end{tabular}
\end{table}


In both \Stan and \RStan, we first represent this model in 
\Stan modeling language. \RStan allows the model to be coded 
in a text file or a character string in \R. 
Here we use a character string. 
<<echo=TRUE>>=
library(rstan) 
schools_code <- '
  data {
    int<lower=0> J; // number of schools 
    real y[J]; // estimated treatment effects
    real<lower=0> sigma[J]; // s.e. of effect estimates 
  } 
  parameters {
    real theta[J]; 
    real mu; 
    real<lower=0> tau; 
  } 
  model {
    theta ~ normal(mu, tau); 
    y ~ normal(theta, sigma);
  } 
'
@

\RStan accepts data as a \code{list}, an \code{environment}, or a vector of characters
containing object names in the working space. So to prepare the data
in \R, we create a \code{list} as follows. 
<<echo=TRUE>>=
dat <- list(J = 8, 
            y = c(28,  8, -3,  7, -1,  1, 18, 12),
            sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
@

Next, we can call function \code{stan} to sample from the model. 
<<echo=TRUE, results=hide>>=
fit <- stan(model_code = schools_code, data = dat, 
            iter = 1000, chains = 4)
@


Function \code{stan} wraps up the follow three steps. These steps are similar to some
steps mentioned above for \Stan. But \RStan has a deep integration of \Stan, which 
allows end-to-end use of \Stan inside \R. 
\begin{enumerate}
\item Translate the model in \Stan code to \Cpp code 
\item Compile the \Cpp code to binary dynamic shared object (DSO)
\item Load the DSO and sample 
\end{enumerate}

Notice it is easy to just use function \code{stan} to conduct all the above
steps if everything goes well. \RStan also provides functionality to fit a
model by several steps to make it easier to debug our \Stan model code and \R
code. 

Function \code{stan} returns an object of S4 class \code{stanfit}, for which
a few generic methods such as \code{print} and \code{plot} are provided. 
<<echo=TRUE>>=
print(fit)
@

\section{Eight schools example step by step}
\label{sec0examplesteps} 

In section \ref{sec0example}, the eight schools example is fitted in \RStan
just using function \code{stan}. However, in our actual development of modeling
and coding, we can use a few steps to have a working model. \RStan also 
provides functionality to fit a model step by step as using \Stan. 

First, we can use \code{stanc} function to translate the model in \Stan
modeling language to \Cpp code. In the case that we have syntax errors in the 
model's \Stan code, the error information from \code{stanc} would 
be reported to help debug. For the eight schools example, we use 
<<echo=TRUE, results=hide>>=
rt <- stanc(model_code = schools_code, model_name = '8schools') 
@

Second, after we have successfully translated out model to \Cpp code, we can
use function \code{stan\_model} to compile the \Cpp code and load the 
dynamic shared object of the model into \R, which is represented 
by S4 class \code{stanmodel}. In this step (as in calling
\code{stan}), a lot of intermediate message such as the \Cpp code and warning
message from the \Cpp compiler during compiling the \Cpp
code might be spewed out especially if \code{verbose = TRUE}. 
In most cases, these messages can be ignored unless there is an error. 
<<echo=TRUE, results=hide>>=
sm <- stan_model(stanc_ret = rt, verbose = FALSE)
@

Also we can construct a model from the model's \Stan code
using \code{stan\_model}, which in this case includes the step of translating 
the model to \Cpp using \code{stanc}. 
<<echo=TRUE, results=hide>>=
sm <- stan_model(model_code = schools_code, model_name = '8schools', 
                 verbose = FALSE)
@

Last, we can use method \code{sampling} associated with 
S4 class \code{stanmodel} to simulate sample from the posterior
distribution. 
<<echo=TRUE, results=hide>>= 
fit <- sampling(sm, data = dat, chains = 4)
@

The returned object from the above \code{sampling} is an object
of S4 class \code{stanfit}, the same type of result returned 
by function \code{stan}. Also we have a variety of 
arguments to control the sampling procedure the same as in 
function \code{stan}, since inside function \code{stan}, function
\code{sampling} is called. 


For the fitted object, S4 class \code{stanfit}, currently,
we have defined generic methods such as \code{print},
\code{summary}, \code{plot}, \code{traceplot}, \code{get\_stancode}, etc. 
Using these functions, we first can assess the convergence
of the Markov chains by looking at the trace plots and calculating 
the split Rhats.  The inference based on the sample after 
warmup (known as `burnin' period) can be obtained by \code{summary}
function and printed out by \code{print}. Also the sample saved 
could be extracted in a couple of ways using function \code{extract}. 
By default, in the summaries for the model, we also include 
the log-posterior for each iteration with name \code{lp\_\_}. 

In addition, in the \code{stanfit} object, we keep all 
the information regarding the sampling procedure, for example, the initial
values for all parameters, the seed for random number generating,
and parameters used for the sampler. 

\section{More details about using RStan}

Details about \pkg{rstan} and the usage of its functions could be 
found inside \pkg{rstan}'s documentation. We talk about a few important
points here. 

\subsection{Arguments of function \code{stan}} 

The arguments for sampling (in function \code{stan} and 
\code{sampling}) mainly include data and defining the settings of 
the sampler such as \code{chains}, \code{iter}, and \code{warmup}. 
In particular, \code{warmup} specifies the number of iterations 
in which the NUTS sampler is in status of adaptation (hence
the sample should not be used for inference). 
After the warmup period, the sampler turns off adaptation. 
The summaries are calculated using the sample after warmup period. 

When the user is trying to specify the initial values for the parameters (i.e., 
specifying \code{init} as a list of lists), 
currently, \pkg{rstan} does not allow partially 
specifying initial values so that initial values for all parameters
need to be given. 

\subsection{Fitted model in S4 class \code{stanfit}} 

In \RStan, we wrap the fitted model in an S4 class \code{stanfit}. Generic
functions defined for this class includes \code{print} (demonstrated in 
Section \ref{sec0example}), \code{plot}, \code{summary},
\code{traceplot}, etc. A common feature for most of these functions are that they allow us 
to specify parameters of interest through \code{pars} so that only part of 
the results for the fitted model are, for example, printed (plotted), which
could be helpful when there are too many parameters in the model.  

Function \code{plot} intends to give us an overview of the inference 
for all the parameters (if possible) in the model. 
Figure \ref{fig0stanfitplot} presents the plot of the eight schools example. 
In this plot, an credible interval (typically 80\%) for all the sample
as well as the log-posterior (\code{lp\_\_}), 
and the median of each chain are displayed. In addition, under the lines
indicating intervals, a small colored area is used to indicate the 
value of split Rhat, in which the color indicates the value of Rhat. 

Function \code{traceplot} plot the traces of all chains for the parameters 
specified. If we include the warmup sample by setting \code{inc\_warmup = TRUE} (the 
default), the background color of the warmup area is different from after warmup.   
We can exclude the warmup area by specifying \code{inc\_warmup = FALSE}.
The example for parameter $\theta$
of the eight schools model is presented in Figure~\ref{fig0stanfitplot}. 
\begin{figure}[ht]
\centering
<<echo=false, fig=TRUE, label=stanfit_plot>>=
plot(fit)
@
\caption{An overview plot for the inference of eight schools example} 
\label{fig0stanfitplot}
\end{figure}

\begin{figure}[ht]
\centering
<<echo=false, fig=TRUE, label=stanfit_tplot, height=4, width=6>>=
traceplot(fit, pars = "tau")
@
\caption{Trace plots of $\tau$ in the eight schools model} 
\label{fig0stanfittplot}
\end{figure}

Another important function for \code{stanfit} is \code{extract}, 
which provides different ways to access the sample. If \code{permuted = TRUE}
for calling \code{extract}, the sample after warmup period 
are returned in an permuted order as a list, each element of which is the 
sample for a parameter.  When \code{permuted = FALSE}, we could extract sample for 
parameters with or without warmup depending on parameter \code{inc\_warmup}.   
In this case, the returned object is an array with the first dimension indicating
iterations, the second indicating chains, and the third indicating parameters. 
<<echo=TRUE>>=
s <- extract(fit, pars = c("theta", "mu"), permuted = TRUE)
names(s)
dim(s$theta)
dim(s$mu)
s2 <- extract(fit, pars = "theta")
dim(s2)
dimnames(s2)
@

\subsection{The dynamic shared objects for models} 

In \Stan, for every model, we use \stanc to compile the 
model from Stan modeling language code to \Cpp code 
and then compile the \Cpp code to dynamic shared object (DSO),
which is loaded into \R and executed to draw sample. 
The compiling from C++ code to DSO, sometimes, takes a while. 
When the model is the same, we could reuse the DSO from previous run. 
In function \code{stan}, if parameter \code{fit} is specified
with a previous fitted object, the compiled model is reused. 
When reusing a previous fitted model, we can specify different 
data and other parameters for function \code{stan}. 

In addition, if the fitted model is saved, for example, by function
\code{save} and \code{save.image}, \RStan is able to save the 
DSO for models, so that they can be used across \R sessions. 
Saving the DSO is optional by specifying parameter \code{save\_dso}, which
is \code{TRUE}, by default, during calling function \code{stan}. 

\section{Miscellaneous} 

In \RStan, we can retrieve the model's \Stan modeling
language code from the fitted object by calling 
\code{get\_stancode}. All the initial values and seeds are 
also saved in this object, so they can be used to 
reproduce previous sampling procedure. 
To get the initial values we can use \code{get\_inits}. 
See Table \ref{tab0stanfitfuns} for a summary of functions
defined in class \code{stanfit}. 

\begin{table}
\caption{Generic functions for S4 class \code{stanfit}} 
\label{tab0stanfitfuns} 
\begin{tabular}{lp{4in}} 
\toprule 
Name  &    Functionality    \\ 
\midrule
\code{print}         & print the summary for sample from all chains  \\
\code{summary}       & summarize for sample from all chains and individual chains \\
\code{plot}          & plot the inferences (intervals and medians) for parameters \\
\code{traceplot}     & plot the traces of chains  \\
\code{extract}       & extract sample of parameters  \\
\code{get\_stancode}     & extract the \Stan modeling language code of the model  \\
\code{get\_stanmodel}     & extract the \code{stanmodel} object \\ 
\code{get\_seed}      & get the seed used for sampling  \\
\code{get\_inits}     & get the initial values used for sampling  \\
\code{get\_logposterior}     & get the log posterior  \\
\code{get\_sampler\_params}    & get parameters used by the sampler such as \code{treedepth} of NUTS  \\
\code{get\_adaptation\_info}    & get adaptation information, if any, of the sampler \\ 
\bottomrule 
\end{tabular}
\end{table}

\nocite{*} 
\bibliography{rstan} 
\end{document} 

