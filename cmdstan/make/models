##
# Models (to be passed through stanc)
##
MODEL_HEADER := stan/src/stan/model/model_header.hpp
CMDSTAN_MAIN := src/cmdstan/main.cpp

.PRECIOUS: %.cpp %.o
$(patsubst %.stan,%,$(wildcard $(addsuffix .stan,$(MAKECMDGOALS)))) : %$(EXE) : %.cpp bin/libstan.a %.stan
	@echo ''
	@echo '--- Linking C++ model ---'
	$(LINK.c) -O$O $(OUTPUT_OPTION) $(CMDSTAN_MAIN) -include $< $(LDLIBS)

# src/%: src/%.o bin/libstan.a
# 	@echo ''
# 	@echo '--- Linking C++ model ---'
# 	$(LINK.c) -O$O $(OUTPUT_OPTION) $< $(LDLIBS)


# %.exe: %.o bin/libstan.a %.stan
# 	@echo ''
# 	@echo '--- Linking C++ model ---'
# 	$(LINK.c) -O$O $(OUTPUT_OPTION) $< $(LDLIBS)

.PRECIOUS: %.cpp
%.cpp : %.stan $(MODEL_HEADER) bin/stanc$(EXE)
	@echo ''
	@echo '--- Translating Stan model to C++ code ---'
	bin/stanc$(EXE) $< --o=$@ --no_main

# $(MODEL_HEADER).d : $(MODEL_HEADER)
# 	@if test -d $(dir $@); \
# 	then \
# 	(set -e; \
# 	rm -f $@; \
# 	$(CC) $(CFLAGS) -O$O $(TARGET_ARCH) -MM $< > $@.$$$$; \
# 	sed -e 's,\($(notdir $(basename $(MODEL_HEADER)))\)\.o[ :]*,$@ : ,g' < $@.$$$$ > $@; \
# 	rm -f $@.$$$$ ); \
# 	fi

# ##
# # Will generate dependencies.
# ##
# ifneq (,$(filter-out clean%,$(MAKECMDGOALS)))
#   -include $(MODEL_HEADER).d
# endif
