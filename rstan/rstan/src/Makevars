## Use the R_HOME indirection to support installations of multiple R version
# PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` -L$(STAN_HOME)/bin -lstanc 
# PKG_CPPFLAGS = -I$(STAN_HOME)/lib -I$(STAN_HOME)/src -I./include/ 

## As an alternative, one can also add this code in a file 'configure'
##
##    PKG_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::LdFlags()"`
## 
##    sed -e "s|@PKG_LIBS@|${PKG_LIBS}|" \
##        src/Makevars.in > src/Makevars
## 
## which together with the following file 'src/Makevars.in'
##
##    PKG_LIBS = @PKG_LIBS@
##
## can be used to create src/Makevars dynamically. This scheme is more
## powerful and can be expanded to also check for and link with other
## libraries.  It should be complemented by a file 'cleanup'
##
##    rm src/Makevars
##
## which removes the autogenerated file src/Makevars. 
##
## Of course, autoconf can also be used to write configure files. This is
## done by a number of packages, but recommended only for more advanced users
## comfortable with autoconf and its related tools.

all: $(SHLIB) userLibrary

## we place it inside the inst/ directory so that it gets installed by the package
USERDIR = ../inst/libs

USERLIB = librstan$(DYLIB_EXT)
USERLIBST = librstan.a 

PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` 
PKG_CPPFLAGS += -I"../inst/include/stansrc"  -I"../inst/include/stanlib"  -I"../inst/include" 

userLibrary: $(USERLIB) $(USERLIBST)
	-@if test ! -e $(USERDIR)$(R_ARCH); then mkdir -p $(USERDIR)$(R_ARCH); fi
	cp $(USERLIB) $(USERDIR)$(R_ARCH)
	cp $(USERLIBST) $(USERDIR)$(R_ARCH)
	rm $(USERLIB) $(USERLIBST)

$(USERLIB): $(OBJECTS)
	$(SHLIB_CXXLD) -o $(USERLIB) $(OBJECTS) $(SHLIB_CXXLDFLAGS) $(ALL_LIBS)
	@if test -e "/usr/bin/install_name_tool"; then /usr/bin/install_name_tool -id $(R_PACKAGE_DIR)/lib$(R_ARCH)/$(USERLIB) $(USERLIB); fi

$(USERLIBST): $(OBJECTS)
	$(AR) qc $(USERLIBST) $(OBJECTS)
	@if test -n "$(RANLIB)"; then $(RANLIB) $(USERLIBST); fi

.PHONY: all clean userLibrary

clean: 
	rm -f $(OBJECTS) $(SHLIB) $(USERLIB) $(USERLIBST)
